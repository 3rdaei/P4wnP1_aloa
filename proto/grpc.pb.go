// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package P4wnP1_grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	LEDSettings
	GadgetSettings
	GadgetSettingsEthernet
	GadgetSettingsUMS
	EthernetInterfaceSettings
	DHCPServerSettings
	DHCPServerRange
	DHCPServerStaticHost
	WiFiSettings
	BSSCfg
	Empty
*/
package P4wnP1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EthernetInterfaceSettings_Mode int32

const (
	EthernetInterfaceSettings_MANUAL      EthernetInterfaceSettings_Mode = 0
	EthernetInterfaceSettings_DHCP_CLIENT EthernetInterfaceSettings_Mode = 1
	EthernetInterfaceSettings_DHCP_SERVER EthernetInterfaceSettings_Mode = 2
)

var EthernetInterfaceSettings_Mode_name = map[int32]string{
	0: "MANUAL",
	1: "DHCP_CLIENT",
	2: "DHCP_SERVER",
}
var EthernetInterfaceSettings_Mode_value = map[string]int32{
	"MANUAL":      0,
	"DHCP_CLIENT": 1,
	"DHCP_SERVER": 2,
}

func (x EthernetInterfaceSettings_Mode) String() string {
	return proto.EnumName(EthernetInterfaceSettings_Mode_name, int32(x))
}
func (EthernetInterfaceSettings_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

type WiFiSettings_Mode int32

const (
	WiFiSettings_AP              WiFiSettings_Mode = 0
	WiFiSettings_STA             WiFiSettings_Mode = 1
	WiFiSettings_STA_FAILOVER_AP WiFiSettings_Mode = 2
)

var WiFiSettings_Mode_name = map[int32]string{
	0: "AP",
	1: "STA",
	2: "STA_FAILOVER_AP",
}
var WiFiSettings_Mode_value = map[string]int32{
	"AP":              0,
	"STA":             1,
	"STA_FAILOVER_AP": 2,
}

func (x WiFiSettings_Mode) String() string {
	return proto.EnumName(WiFiSettings_Mode_name, int32(x))
}
func (WiFiSettings_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

type WiFiSettings_APAuthMode int32

const (
	WiFiSettings_WPA2_PSK WiFiSettings_APAuthMode = 0
	WiFiSettings_OPEN     WiFiSettings_APAuthMode = 1
)

var WiFiSettings_APAuthMode_name = map[int32]string{
	0: "WPA2_PSK",
	1: "OPEN",
}
var WiFiSettings_APAuthMode_value = map[string]int32{
	"WPA2_PSK": 0,
	"OPEN":     1,
}

func (x WiFiSettings_APAuthMode) String() string {
	return proto.EnumName(WiFiSettings_APAuthMode_name, int32(x))
}
func (WiFiSettings_APAuthMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

// LED
type LEDSettings struct {
	BlinkCount uint32 `protobuf:"varint,1,opt,name=blink_count,json=blinkCount" json:"blink_count,omitempty"`
}

func (m *LEDSettings) Reset()                    { *m = LEDSettings{} }
func (m *LEDSettings) String() string            { return proto.CompactTextString(m) }
func (*LEDSettings) ProtoMessage()               {}
func (*LEDSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LEDSettings) GetBlinkCount() uint32 {
	if m != nil {
		return m.BlinkCount
	}
	return 0
}

// USB Gadget
type GadgetSettings struct {
	Enabled          bool                    `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Vid              string                  `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	Pid              string                  `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Manufacturer     string                  `protobuf:"bytes,4,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Product          string                  `protobuf:"bytes,5,opt,name=product" json:"product,omitempty"`
	Serial           string                  `protobuf:"bytes,6,opt,name=serial" json:"serial,omitempty"`
	Use_CDC_ECM      bool                    `protobuf:"varint,7,opt,name=use_CDC_ECM,json=useCDCECM" json:"use_CDC_ECM,omitempty"`
	Use_RNDIS        bool                    `protobuf:"varint,8,opt,name=use_RNDIS,json=useRNDIS" json:"use_RNDIS,omitempty"`
	Use_HID_KEYBOARD bool                    `protobuf:"varint,9,opt,name=use_HID_KEYBOARD,json=useHIDKEYBOARD" json:"use_HID_KEYBOARD,omitempty"`
	Use_HID_MOUSE    bool                    `protobuf:"varint,10,opt,name=use_HID_MOUSE,json=useHIDMOUSE" json:"use_HID_MOUSE,omitempty"`
	Use_HID_RAW      bool                    `protobuf:"varint,11,opt,name=use_HID_RAW,json=useHIDRAW" json:"use_HID_RAW,omitempty"`
	Use_UMS          bool                    `protobuf:"varint,12,opt,name=use_UMS,json=useUMS" json:"use_UMS,omitempty"`
	Use_SERIAL       bool                    `protobuf:"varint,13,opt,name=use_SERIAL,json=useSERIAL" json:"use_SERIAL,omitempty"`
	RndisSettings    *GadgetSettingsEthernet `protobuf:"bytes,14,opt,name=rndis_settings,json=rndisSettings" json:"rndis_settings,omitempty"`
	CdcEcmSettings   *GadgetSettingsEthernet `protobuf:"bytes,15,opt,name=cdc_ecm_settings,json=cdcEcmSettings" json:"cdc_ecm_settings,omitempty"`
	UmsSettings      *GadgetSettingsUMS      `protobuf:"bytes,16,opt,name=ums_settings,json=umsSettings" json:"ums_settings,omitempty"`
}

func (m *GadgetSettings) Reset()                    { *m = GadgetSettings{} }
func (m *GadgetSettings) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettings) ProtoMessage()               {}
func (*GadgetSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GadgetSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GadgetSettings) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *GadgetSettings) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *GadgetSettings) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *GadgetSettings) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *GadgetSettings) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *GadgetSettings) GetUse_CDC_ECM() bool {
	if m != nil {
		return m.Use_CDC_ECM
	}
	return false
}

func (m *GadgetSettings) GetUse_RNDIS() bool {
	if m != nil {
		return m.Use_RNDIS
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_KEYBOARD() bool {
	if m != nil {
		return m.Use_HID_KEYBOARD
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_MOUSE() bool {
	if m != nil {
		return m.Use_HID_MOUSE
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_RAW() bool {
	if m != nil {
		return m.Use_HID_RAW
	}
	return false
}

func (m *GadgetSettings) GetUse_UMS() bool {
	if m != nil {
		return m.Use_UMS
	}
	return false
}

func (m *GadgetSettings) GetUse_SERIAL() bool {
	if m != nil {
		return m.Use_SERIAL
	}
	return false
}

func (m *GadgetSettings) GetRndisSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.RndisSettings
	}
	return nil
}

func (m *GadgetSettings) GetCdcEcmSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.CdcEcmSettings
	}
	return nil
}

func (m *GadgetSettings) GetUmsSettings() *GadgetSettingsUMS {
	if m != nil {
		return m.UmsSettings
	}
	return nil
}

type GadgetSettingsEthernet struct {
	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	DevAddr  string `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr" json:"dev_addr,omitempty"`
}

func (m *GadgetSettingsEthernet) Reset()                    { *m = GadgetSettingsEthernet{} }
func (m *GadgetSettingsEthernet) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsEthernet) ProtoMessage()               {}
func (*GadgetSettingsEthernet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GadgetSettingsEthernet) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

func (m *GadgetSettingsEthernet) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

type GadgetSettingsUMS struct {
	Cdrom bool   `protobuf:"varint,1,opt,name=cdrom" json:"cdrom,omitempty"`
	File  string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *GadgetSettingsUMS) Reset()                    { *m = GadgetSettingsUMS{} }
func (m *GadgetSettingsUMS) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsUMS) ProtoMessage()               {}
func (*GadgetSettingsUMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GadgetSettingsUMS) GetCdrom() bool {
	if m != nil {
		return m.Cdrom
	}
	return false
}

func (m *GadgetSettingsUMS) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type EthernetInterfaceSettings struct {
	Name               string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Mode               EthernetInterfaceSettings_Mode `protobuf:"varint,2,opt,name=mode,enum=P4wnP1_grpc.EthernetInterfaceSettings_Mode" json:"mode,omitempty"`
	IpAddress4         string                         `protobuf:"bytes,3,opt,name=ipAddress4" json:"ipAddress4,omitempty"`
	Netmask4           string                         `protobuf:"bytes,4,opt,name=netmask4" json:"netmask4,omitempty"`
	Enabled            bool                           `protobuf:"varint,5,opt,name=enabled" json:"enabled,omitempty"`
	DhcpServerSettings *DHCPServerSettings            `protobuf:"bytes,6,opt,name=dhcpServerSettings" json:"dhcpServerSettings,omitempty"`
}

func (m *EthernetInterfaceSettings) Reset()                    { *m = EthernetInterfaceSettings{} }
func (m *EthernetInterfaceSettings) String() string            { return proto.CompactTextString(m) }
func (*EthernetInterfaceSettings) ProtoMessage()               {}
func (*EthernetInterfaceSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EthernetInterfaceSettings) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetMode() EthernetInterfaceSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return EthernetInterfaceSettings_MANUAL
}

func (m *EthernetInterfaceSettings) GetIpAddress4() string {
	if m != nil {
		return m.IpAddress4
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetNetmask4() string {
	if m != nil {
		return m.Netmask4
	}
	return ""
}

func (m *EthernetInterfaceSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EthernetInterfaceSettings) GetDhcpServerSettings() *DHCPServerSettings {
	if m != nil {
		return m.DhcpServerSettings
	}
	return nil
}

// DHCP
type DHCPServerSettings struct {
	ListenPort         uint32             `protobuf:"varint,1,opt,name=listenPort" json:"listenPort,omitempty"`
	ListenInterface    string             `protobuf:"bytes,2,opt,name=listenInterface" json:"listenInterface,omitempty"`
	LeaseFile          string             `protobuf:"bytes,3,opt,name=leaseFile" json:"leaseFile,omitempty"`
	NotAuthoritative   bool               `protobuf:"varint,4,opt,name=notAuthoritative" json:"notAuthoritative,omitempty"`
	DoNotBindInterface bool               `protobuf:"varint,5,opt,name=doNotBindInterface" json:"doNotBindInterface,omitempty"`
	CallbackScript     string             `protobuf:"bytes,6,opt,name=callbackScript" json:"callbackScript,omitempty"`
	Ranges             []*DHCPServerRange `protobuf:"bytes,7,rep,name=ranges" json:"ranges,omitempty"`
	// repeated DHCPServerOption options = 8;
	Options     map[uint32]string       `protobuf:"bytes,8,rep,name=options" json:"options,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StaticHosts []*DHCPServerStaticHost `protobuf:"bytes,9,rep,name=staticHosts" json:"staticHosts,omitempty"`
}

func (m *DHCPServerSettings) Reset()                    { *m = DHCPServerSettings{} }
func (m *DHCPServerSettings) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerSettings) ProtoMessage()               {}
func (*DHCPServerSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DHCPServerSettings) GetListenPort() uint32 {
	if m != nil {
		return m.ListenPort
	}
	return 0
}

func (m *DHCPServerSettings) GetListenInterface() string {
	if m != nil {
		return m.ListenInterface
	}
	return ""
}

func (m *DHCPServerSettings) GetLeaseFile() string {
	if m != nil {
		return m.LeaseFile
	}
	return ""
}

func (m *DHCPServerSettings) GetNotAuthoritative() bool {
	if m != nil {
		return m.NotAuthoritative
	}
	return false
}

func (m *DHCPServerSettings) GetDoNotBindInterface() bool {
	if m != nil {
		return m.DoNotBindInterface
	}
	return false
}

func (m *DHCPServerSettings) GetCallbackScript() string {
	if m != nil {
		return m.CallbackScript
	}
	return ""
}

func (m *DHCPServerSettings) GetRanges() []*DHCPServerRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *DHCPServerSettings) GetOptions() map[uint32]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *DHCPServerSettings) GetStaticHosts() []*DHCPServerStaticHost {
	if m != nil {
		return m.StaticHosts
	}
	return nil
}

// Could be used for IPv4 or IPv6 (refer dnsmasq docs), nor field for prefix length (default is 64)
type DHCPServerRange struct {
	RangeLower string `protobuf:"bytes,1,opt,name=rangeLower" json:"rangeLower,omitempty"`
	RangeUpper string `protobuf:"bytes,2,opt,name=rangeUpper" json:"rangeUpper,omitempty"`
	LeaseTime  string `protobuf:"bytes,3,opt,name=leaseTime" json:"leaseTime,omitempty"`
}

func (m *DHCPServerRange) Reset()                    { *m = DHCPServerRange{} }
func (m *DHCPServerRange) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerRange) ProtoMessage()               {}
func (*DHCPServerRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DHCPServerRange) GetRangeLower() string {
	if m != nil {
		return m.RangeLower
	}
	return ""
}

func (m *DHCPServerRange) GetRangeUpper() string {
	if m != nil {
		return m.RangeUpper
	}
	return ""
}

func (m *DHCPServerRange) GetLeaseTime() string {
	if m != nil {
		return m.LeaseTime
	}
	return ""
}

// Used for static leases
type DHCPServerStaticHost struct {
	Mac string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	Ip  string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (m *DHCPServerStaticHost) Reset()                    { *m = DHCPServerStaticHost{} }
func (m *DHCPServerStaticHost) String() string            { return proto.CompactTextString(m) }
func (*DHCPServerStaticHost) ProtoMessage()               {}
func (*DHCPServerStaticHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DHCPServerStaticHost) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *DHCPServerStaticHost) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// WiFi
type WiFiSettings struct {
	Disabled      bool                    `protobuf:"varint,1,opt,name=disabled" json:"disabled,omitempty"`
	Reg           string                  `protobuf:"bytes,2,opt,name=reg" json:"reg,omitempty"`
	Mode          WiFiSettings_Mode       `protobuf:"varint,3,opt,name=mode,enum=P4wnP1_grpc.WiFiSettings_Mode" json:"mode,omitempty"`
	AuthMode      WiFiSettings_APAuthMode `protobuf:"varint,4,opt,name=auth_mode,json=authMode,enum=P4wnP1_grpc.WiFiSettings_APAuthMode" json:"auth_mode,omitempty"`
	ApChannel     uint32                  `protobuf:"varint,5,opt,name=ap_channel,json=apChannel" json:"ap_channel,omitempty"`
	BssCfgAP      *BSSCfg                 `protobuf:"bytes,6,opt,name=BssCfgAP" json:"BssCfgAP,omitempty"`
	BssCfgClient  *BSSCfg                 `protobuf:"bytes,7,opt,name=BssCfgClient" json:"BssCfgClient,omitempty"`
	ApHideSsid    bool                    `protobuf:"varint,8,opt,name=ap_hide_ssid,json=apHideSsid" json:"ap_hide_ssid,omitempty"`
	DisableNexmon bool                    `protobuf:"varint,10,opt,name=disable_nexmon,json=disableNexmon" json:"disable_nexmon,omitempty"`
}

func (m *WiFiSettings) Reset()                    { *m = WiFiSettings{} }
func (m *WiFiSettings) String() string            { return proto.CompactTextString(m) }
func (*WiFiSettings) ProtoMessage()               {}
func (*WiFiSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *WiFiSettings) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *WiFiSettings) GetReg() string {
	if m != nil {
		return m.Reg
	}
	return ""
}

func (m *WiFiSettings) GetMode() WiFiSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return WiFiSettings_AP
}

func (m *WiFiSettings) GetAuthMode() WiFiSettings_APAuthMode {
	if m != nil {
		return m.AuthMode
	}
	return WiFiSettings_WPA2_PSK
}

func (m *WiFiSettings) GetApChannel() uint32 {
	if m != nil {
		return m.ApChannel
	}
	return 0
}

func (m *WiFiSettings) GetBssCfgAP() *BSSCfg {
	if m != nil {
		return m.BssCfgAP
	}
	return nil
}

func (m *WiFiSettings) GetBssCfgClient() *BSSCfg {
	if m != nil {
		return m.BssCfgClient
	}
	return nil
}

func (m *WiFiSettings) GetApHideSsid() bool {
	if m != nil {
		return m.ApHideSsid
	}
	return false
}

func (m *WiFiSettings) GetDisableNexmon() bool {
	if m != nil {
		return m.DisableNexmon
	}
	return false
}

type BSSCfg struct {
	SSID string `protobuf:"bytes,1,opt,name=SSID" json:"SSID,omitempty"`
	PSK  string `protobuf:"bytes,2,opt,name=PSK" json:"PSK,omitempty"`
}

func (m *BSSCfg) Reset()                    { *m = BSSCfg{} }
func (m *BSSCfg) String() string            { return proto.CompactTextString(m) }
func (*BSSCfg) ProtoMessage()               {}
func (*BSSCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BSSCfg) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *BSSCfg) GetPSK() string {
	if m != nil {
		return m.PSK
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*LEDSettings)(nil), "P4wnP1_grpc.LEDSettings")
	proto.RegisterType((*GadgetSettings)(nil), "P4wnP1_grpc.GadgetSettings")
	proto.RegisterType((*GadgetSettingsEthernet)(nil), "P4wnP1_grpc.GadgetSettingsEthernet")
	proto.RegisterType((*GadgetSettingsUMS)(nil), "P4wnP1_grpc.GadgetSettingsUMS")
	proto.RegisterType((*EthernetInterfaceSettings)(nil), "P4wnP1_grpc.EthernetInterfaceSettings")
	proto.RegisterType((*DHCPServerSettings)(nil), "P4wnP1_grpc.DHCPServerSettings")
	proto.RegisterType((*DHCPServerRange)(nil), "P4wnP1_grpc.DHCPServerRange")
	proto.RegisterType((*DHCPServerStaticHost)(nil), "P4wnP1_grpc.DHCPServerStaticHost")
	proto.RegisterType((*WiFiSettings)(nil), "P4wnP1_grpc.WiFiSettings")
	proto.RegisterType((*BSSCfg)(nil), "P4wnP1_grpc.BSSCfg")
	proto.RegisterType((*Empty)(nil), "P4wnP1_grpc.Empty")
	proto.RegisterEnum("P4wnP1_grpc.EthernetInterfaceSettings_Mode", EthernetInterfaceSettings_Mode_name, EthernetInterfaceSettings_Mode_value)
	proto.RegisterEnum("P4wnP1_grpc.WiFiSettings_Mode", WiFiSettings_Mode_name, WiFiSettings_Mode_value)
	proto.RegisterEnum("P4wnP1_grpc.WiFiSettings_APAuthMode", WiFiSettings_APAuthMode_name, WiFiSettings_APAuthMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P4WNP1 service

type P4WNP1Client interface {
	GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	DeployGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	GetGadgetSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	SetGadgetSettings(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error)
	GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error)
	SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error)
	MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error)
	DeployEthernetInterfaceSettings(ctx context.Context, in *EthernetInterfaceSettings, opts ...grpc.CallOption) (*Empty, error)
	DeployWifiSettings(ctx context.Context, in *WiFiSettings, opts ...grpc.CallOption) (*Empty, error)
}

type p4WNP1Client struct {
	cc *grpc.ClientConn
}

func NewP4WNP1Client(cc *grpc.ClientConn) P4WNP1Client {
	return &p4WNP1Client{cc}
}

func (c *p4WNP1Client) GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetDeployedGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) DeployGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/DeployGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) GetGadgetSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetGadgetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) SetGadgetSettings(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/SetGadgetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error) {
	out := new(LEDSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/SetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/MountUMSFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) DeployEthernetInterfaceSettings(ctx context.Context, in *EthernetInterfaceSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/DeployEthernetInterfaceSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) DeployWifiSettings(ctx context.Context, in *WiFiSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/DeployWifiSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P4WNP1 service

type P4WNP1Server interface {
	GetDeployedGadgetSetting(context.Context, *Empty) (*GadgetSettings, error)
	DeployGadgetSetting(context.Context, *Empty) (*GadgetSettings, error)
	GetGadgetSettings(context.Context, *Empty) (*GadgetSettings, error)
	SetGadgetSettings(context.Context, *GadgetSettings) (*GadgetSettings, error)
	GetLEDSettings(context.Context, *Empty) (*LEDSettings, error)
	SetLEDSettings(context.Context, *LEDSettings) (*Empty, error)
	MountUMSFile(context.Context, *GadgetSettingsUMS) (*Empty, error)
	DeployEthernetInterfaceSettings(context.Context, *EthernetInterfaceSettings) (*Empty, error)
	DeployWifiSettings(context.Context, *WiFiSettings) (*Empty, error)
}

func RegisterP4WNP1Server(s *grpc.Server, srv P4WNP1Server) {
	s.RegisterService(&_P4WNP1_serviceDesc, srv)
}

func _P4WNP1_GetDeployedGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetDeployedGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetDeployedGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetDeployedGadgetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_DeployGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).DeployGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/DeployGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).DeployGadgetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_GetGadgetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetGadgetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetGadgetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetGadgetSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_SetGadgetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).SetGadgetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/SetGadgetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).SetGadgetSettings(ctx, req.(*GadgetSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_GetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetLEDSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_SetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LEDSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).SetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/SetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).SetLEDSettings(ctx, req.(*LEDSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_MountUMSFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettingsUMS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).MountUMSFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/MountUMSFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).MountUMSFile(ctx, req.(*GadgetSettingsUMS))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_DeployEthernetInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthernetInterfaceSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).DeployEthernetInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/DeployEthernetInterfaceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).DeployEthernetInterfaceSettings(ctx, req.(*EthernetInterfaceSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_DeployWifiSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WiFiSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).DeployWifiSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/DeployWifiSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).DeployWifiSettings(ctx, req.(*WiFiSettings))
	}
	return interceptor(ctx, in, info, handler)
}

var _P4WNP1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "P4wnP1_grpc.P4WNP1",
	HandlerType: (*P4WNP1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployedGadgetSetting",
			Handler:    _P4WNP1_GetDeployedGadgetSetting_Handler,
		},
		{
			MethodName: "DeployGadgetSetting",
			Handler:    _P4WNP1_DeployGadgetSetting_Handler,
		},
		{
			MethodName: "GetGadgetSettings",
			Handler:    _P4WNP1_GetGadgetSettings_Handler,
		},
		{
			MethodName: "SetGadgetSettings",
			Handler:    _P4WNP1_SetGadgetSettings_Handler,
		},
		{
			MethodName: "GetLEDSettings",
			Handler:    _P4WNP1_GetLEDSettings_Handler,
		},
		{
			MethodName: "SetLEDSettings",
			Handler:    _P4WNP1_SetLEDSettings_Handler,
		},
		{
			MethodName: "MountUMSFile",
			Handler:    _P4WNP1_MountUMSFile_Handler,
		},
		{
			MethodName: "DeployEthernetInterfaceSettings",
			Handler:    _P4WNP1_DeployEthernetInterfaceSettings_Handler,
		},
		{
			MethodName: "DeployWifiSettings",
			Handler:    _P4WNP1_DeployWifiSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xef, 0x6e, 0xdb, 0x36,
	0x10, 0x8f, 0x1d, 0xc7, 0x7f, 0xce, 0x8e, 0xe3, 0xb2, 0x45, 0xa7, 0xa6, 0x5d, 0x9b, 0x69, 0x5d,
	0x11, 0x6c, 0x85, 0x87, 0x7a, 0x01, 0x56, 0x14, 0x18, 0x36, 0x45, 0x56, 0x62, 0x2f, 0xb1, 0x2d,
	0x48, 0x71, 0x83, 0x7d, 0x12, 0x14, 0x91, 0xb1, 0x89, 0xd8, 0x92, 0x20, 0x51, 0xe9, 0xf2, 0x4e,
	0x7b, 0x95, 0x3d, 0xc0, 0x1e, 0x60, 0xcf, 0xb1, 0x81, 0xd4, 0x9f, 0x48, 0x89, 0xdd, 0x16, 0xdb,
	0x37, 0xf2, 0x77, 0x77, 0xbf, 0x3b, 0xf2, 0x78, 0x77, 0x04, 0x98, 0x05, 0xbe, 0xd3, 0xf5, 0x03,
	0x8f, 0x79, 0xa8, 0xa9, 0x1f, 0x7c, 0x70, 0xf5, 0x37, 0x16, 0x87, 0xe4, 0x2e, 0x34, 0x4f, 0xb5,
	0xbe, 0x49, 0x18, 0xa3, 0xee, 0x2c, 0x44, 0x2f, 0xa0, 0x79, 0xb1, 0xa0, 0xee, 0x95, 0xe5, 0x78,
	0x91, 0xcb, 0xa4, 0xd2, 0x5e, 0x69, 0x7f, 0xdb, 0x00, 0x01, 0xa9, 0x1c, 0x91, 0xff, 0xae, 0x40,
	0xfb, 0xd8, 0xc6, 0x33, 0xc2, 0x32, 0x1b, 0x09, 0x6a, 0xc4, 0xb5, 0x2f, 0x16, 0x04, 0x0b, 0xfd,
	0xba, 0x91, 0x6e, 0x51, 0x07, 0x36, 0xaf, 0x29, 0x96, 0xca, 0x7b, 0xa5, 0xfd, 0x86, 0xc1, 0x97,
	0x1c, 0xf1, 0x29, 0x96, 0x36, 0x63, 0xc4, 0xa7, 0x18, 0xc9, 0xd0, 0x5a, 0xda, 0x6e, 0x74, 0x69,
	0x3b, 0x2c, 0x0a, 0x48, 0x20, 0x55, 0x84, 0xa8, 0x80, 0x71, 0x0f, 0x7e, 0xe0, 0xe1, 0xc8, 0x61,
	0xd2, 0x96, 0x10, 0xa7, 0x5b, 0xf4, 0x18, 0xaa, 0x21, 0x09, 0xa8, 0xbd, 0x90, 0xaa, 0x42, 0x90,
	0xec, 0xd0, 0x73, 0x68, 0x46, 0x21, 0xb1, 0xd4, 0xbe, 0x6a, 0x69, 0xea, 0x48, 0xaa, 0x89, 0xb8,
	0x1a, 0x51, 0x48, 0xd4, 0xbe, 0xaa, 0xa9, 0x23, 0xf4, 0x14, 0xf8, 0xc6, 0x32, 0xc6, 0xfd, 0xa1,
	0x29, 0xd5, 0x85, 0xb4, 0x1e, 0x85, 0x44, 0xec, 0xd1, 0x3e, 0x74, 0xb8, 0x70, 0x30, 0xec, 0x5b,
	0x27, 0xda, 0x6f, 0x87, 0x13, 0xc5, 0xe8, 0x4b, 0x0d, 0xa1, 0xd3, 0x8e, 0x42, 0x32, 0x18, 0xf6,
	0x53, 0x14, 0xc9, 0xb0, 0x9d, 0x6a, 0x8e, 0x26, 0x53, 0x53, 0x93, 0x40, 0xa8, 0x35, 0x63, 0x35,
	0x01, 0xa5, 0xa1, 0x70, 0x1d, 0x43, 0x39, 0x97, 0x9a, 0x59, 0x28, 0x83, 0x61, 0xdf, 0x50, 0xce,
	0xd1, 0x17, 0x50, 0xe3, 0xf2, 0xe9, 0xc8, 0x94, 0x5a, 0x42, 0x56, 0x8d, 0x42, 0x32, 0x1d, 0x99,
	0xe8, 0x4b, 0x00, 0x2e, 0x30, 0x35, 0x63, 0xa8, 0x9c, 0x4a, 0xdb, 0x99, 0x5d, 0x0c, 0xa0, 0x5f,
	0xa1, 0x1d, 0xb8, 0x98, 0x86, 0x56, 0x98, 0x24, 0x42, 0x6a, 0xef, 0x95, 0xf6, 0x9b, 0xbd, 0xaf,
	0xbb, 0xb9, 0xfc, 0x76, 0x8b, 0xb9, 0xd2, 0xd8, 0x9c, 0x04, 0x2e, 0x61, 0xc6, 0xb6, 0x30, 0xcd,
	0x52, 0x38, 0x82, 0x8e, 0x83, 0x1d, 0x8b, 0x38, 0xcb, 0x5b, 0xb6, 0x9d, 0xcf, 0x67, 0x6b, 0x3b,
	0xd8, 0xd1, 0x9c, 0x65, 0x46, 0xa7, 0x40, 0x2b, 0x5a, 0xe6, 0x02, 0xeb, 0x08, 0xaa, 0xe7, 0x1f,
	0xa1, 0x9a, 0x8e, 0x4c, 0xa3, 0x19, 0x2d, 0xb3, 0x88, 0x64, 0x1d, 0x1e, 0xaf, 0x76, 0xc6, 0x53,
	0x37, 0xf7, 0x42, 0x66, 0xd9, 0x18, 0x07, 0xe2, 0xc1, 0x35, 0x8c, 0x3a, 0x07, 0x14, 0x8c, 0x03,
	0xf4, 0x04, 0xea, 0x98, 0x5c, 0xc7, 0xb2, 0xf8, 0xd9, 0xd5, 0x30, 0xb9, 0xe6, 0x22, 0xf9, 0x27,
	0x78, 0x70, 0xcf, 0x27, 0x7a, 0x04, 0x5b, 0x0e, 0x0e, 0xbc, 0x65, 0xf2, 0x72, 0xe3, 0x0d, 0x42,
	0x50, 0xb9, 0xa4, 0x0b, 0x92, 0x30, 0x88, 0xb5, 0xfc, 0x67, 0x19, 0x9e, 0xa4, 0x31, 0x0c, 0x5d,
	0x46, 0x82, 0x4b, 0xdb, 0x21, 0xd9, 0x89, 0x11, 0x54, 0x5c, 0x7b, 0x49, 0x92, 0x78, 0xc4, 0x1a,
	0xfd, 0x0c, 0x95, 0xa5, 0x87, 0x63, 0x96, 0x76, 0xef, 0xbb, 0xc2, 0xe9, 0xd7, 0x32, 0x75, 0x47,
	0x1e, 0x26, 0x86, 0x30, 0x44, 0xcf, 0x01, 0xa8, 0xcf, 0x63, 0x27, 0x61, 0x78, 0x90, 0xd4, 0x4c,
	0x0e, 0x41, 0xbb, 0x50, 0x77, 0x09, 0x5b, 0xda, 0xe1, 0xd5, 0x41, 0x52, 0x36, 0xd9, 0x3e, 0x5f,
	0x94, 0x5b, 0xc5, 0xa2, 0x9c, 0x00, 0xc2, 0x73, 0xc7, 0x37, 0x49, 0x70, 0x4d, 0x82, 0xd4, 0xad,
	0x28, 0x9f, 0x66, 0xef, 0x45, 0x21, 0xc8, 0xfe, 0x40, 0xd5, 0x8b, 0x6a, 0xc6, 0x0a, 0x53, 0xf9,
	0x00, 0x2a, 0x3c, 0x68, 0x04, 0x50, 0x1d, 0x29, 0xe3, 0xa9, 0x72, 0xda, 0xd9, 0x40, 0x3b, 0xd0,
	0xe4, 0xd6, 0x96, 0x7a, 0x3a, 0xd4, 0xc6, 0x67, 0x9d, 0x52, 0x06, 0x98, 0x9a, 0xf1, 0x5e, 0x33,
	0x3a, 0x65, 0xf9, 0x9f, 0x4d, 0x40, 0xf7, 0x1d, 0xf0, 0x33, 0x2f, 0x68, 0xc8, 0x88, 0xab, 0x7b,
	0x41, 0xd6, 0x7f, 0x6e, 0x11, 0xb4, 0x0f, 0x3b, 0xf1, 0x2e, 0xbb, 0xb9, 0x24, 0x4b, 0x77, 0x61,
	0xf4, 0x0c, 0x1a, 0x0b, 0x62, 0x87, 0xe4, 0x88, 0x67, 0x32, 0xbe, 0xbc, 0x5b, 0x00, 0x7d, 0x0b,
	0x1d, 0xd7, 0x63, 0x4a, 0xc4, 0xe6, 0x5e, 0x40, 0x99, 0xcd, 0xe8, 0x35, 0x11, 0x77, 0x58, 0x37,
	0xee, 0xe1, 0xa8, 0x0b, 0x08, 0x7b, 0x63, 0x8f, 0x1d, 0x52, 0x17, 0xdf, 0xba, 0x8d, 0xaf, 0x75,
	0x85, 0x04, 0xbd, 0x82, 0xb6, 0x63, 0x2f, 0x16, 0x17, 0xb6, 0x73, 0x65, 0x3a, 0x01, 0xf5, 0x59,
	0xd2, 0x9c, 0xee, 0xa0, 0xe8, 0x00, 0xaa, 0x81, 0xed, 0xce, 0x48, 0x28, 0xd5, 0xf6, 0x36, 0xf7,
	0x9b, 0xbd, 0x67, 0x6b, 0x6e, 0xdf, 0xe0, 0x4a, 0x46, 0xa2, 0x8b, 0x8e, 0xa0, 0xe6, 0xf9, 0x8c,
	0x7a, 0x6e, 0x28, 0xd5, 0x85, 0xd9, 0xeb, 0x4f, 0x24, 0xad, 0x3b, 0x89, 0xd5, 0x35, 0x97, 0x05,
	0x37, 0x46, 0x6a, 0x8c, 0x54, 0x68, 0x86, 0xfc, 0x80, 0xce, 0xc0, 0x0b, 0x59, 0x28, 0x35, 0x04,
	0xd7, 0x57, 0xeb, 0xb8, 0x32, 0x4d, 0x23, 0x6f, 0xb5, 0xfb, 0x0e, 0x5a, 0x79, 0x76, 0xde, 0xdf,
	0xaf, 0xc8, 0x4d, 0x92, 0x37, 0xbe, 0xe4, 0x15, 0x76, 0x6d, 0x2f, 0xa2, 0x34, 0x4d, 0xf1, 0xe6,
	0x5d, 0xf9, 0x6d, 0x49, 0xf6, 0x60, 0xe7, 0xce, 0x19, 0x79, 0xf6, 0xc5, 0x29, 0x4f, 0xbd, 0x0f,
	0x24, 0x2d, 0xee, 0x1c, 0x92, 0xc9, 0xa7, 0xbe, 0x4f, 0xd2, 0x02, 0xcf, 0x21, 0x59, 0xce, 0xcf,
	0xe8, 0xb2, 0x98, 0x73, 0x0e, 0xc8, 0x6f, 0xe1, 0xd1, 0xaa, 0x13, 0xf1, 0xa0, 0x97, 0xb6, 0x93,
	0xb8, 0xe3, 0x4b, 0xd4, 0x86, 0x32, 0xf5, 0x13, 0xfe, 0x32, 0xf5, 0xe5, 0xbf, 0x36, 0xa1, 0x75,
	0x4e, 0x8f, 0x68, 0xf6, 0x4c, 0x77, 0xa1, 0x8e, 0x69, 0x98, 0x1f, 0x7a, 0xd9, 0x9e, 0xd3, 0x05,
	0x64, 0x96, 0x4e, 0xbd, 0x80, 0xcc, 0x50, 0x2f, 0xe9, 0x04, 0x9b, 0xa2, 0x13, 0x14, 0xfb, 0x60,
	0x9e, 0x36, 0x5f, 0xfc, 0x0a, 0x34, 0xec, 0x88, 0xcd, 0x2d, 0x61, 0x58, 0x11, 0x86, 0x2f, 0xd7,
	0x1b, 0x2a, 0x3a, 0x7f, 0xb2, 0xc2, 0xbc, 0x6e, 0x27, 0x2b, 0x3e, 0x40, 0x6c, 0xdf, 0x72, 0xe6,
	0xb6, 0xeb, 0x92, 0x85, 0x78, 0xaf, 0xdb, 0x46, 0xc3, 0xf6, 0xd5, 0x18, 0x40, 0xdf, 0x43, 0xfd,
	0x30, 0x0c, 0xd5, 0xcb, 0x99, 0xa2, 0x27, 0xe5, 0xff, 0xb0, 0xe0, 0xe0, 0xd0, 0x34, 0xd5, 0xcb,
	0x99, 0x91, 0x29, 0xa1, 0x1f, 0xa1, 0x15, 0xaf, 0xd5, 0x05, 0x25, 0x2e, 0x13, 0x53, 0x75, 0x8d,
	0x51, 0x41, 0x11, 0xed, 0x41, 0xcb, 0xf6, 0xad, 0x39, 0xc5, 0xc4, 0x0a, 0x43, 0x8a, 0x93, 0x81,
	0x0b, 0xb6, 0x3f, 0xa0, 0x98, 0x98, 0x21, 0xc5, 0xe8, 0x1b, 0x68, 0x27, 0xf7, 0x67, 0xb9, 0xe4,
	0xf7, 0xa5, 0xe7, 0x26, 0x93, 0x74, 0x3b, 0x41, 0xc7, 0x02, 0x94, 0x5f, 0x27, 0xad, 0xa6, 0x0a,
	0x65, 0x45, 0xef, 0x6c, 0xa0, 0x1a, 0x6c, 0x9a, 0x67, 0x4a, 0xa7, 0x84, 0x1e, 0xc2, 0x8e, 0x79,
	0xa6, 0x58, 0x47, 0xca, 0xf0, 0x74, 0xf2, 0x5e, 0x33, 0x2c, 0x45, 0xef, 0x94, 0xe5, 0x97, 0x00,
	0xb7, 0xf7, 0x82, 0x5a, 0x50, 0x3f, 0xd7, 0x95, 0x9e, 0xa5, 0x9b, 0x27, 0x9d, 0x0d, 0x54, 0x87,
	0xca, 0x44, 0xd7, 0xc6, 0x9d, 0x92, 0xdc, 0x85, 0x6a, 0x1c, 0x34, 0x6f, 0xe2, 0xa6, 0x39, 0xec,
	0xa7, 0x4d, 0x9c, 0xaf, 0x79, 0x32, 0x75, 0xf3, 0x24, 0x4d, 0xa6, 0x6e, 0x9e, 0xc8, 0x35, 0xd8,
	0xd2, 0x96, 0x3e, 0xbb, 0xe9, 0xfd, 0xb1, 0x05, 0x55, 0xfd, 0xe0, 0x7c, 0xac, 0xbf, 0x41, 0x23,
	0x90, 0x8e, 0x09, 0xeb, 0x13, 0x7f, 0xe1, 0xdd, 0x10, 0x5c, 0x18, 0x33, 0x08, 0x15, 0x1b, 0x3f,
	0x37, 0xdd, 0x7d, 0xfa, 0x91, 0x51, 0x28, 0x6f, 0xa0, 0x01, 0x3c, 0x8c, 0xb9, 0xfe, 0x37, 0xd3,
	0x11, 0x3c, 0x38, 0x26, 0xec, 0xce, 0x87, 0xed, 0x3f, 0xf0, 0x4c, 0xe0, 0x81, 0x79, 0x8f, 0xe7,
	0x63, 0x36, 0x9f, 0x22, 0xfc, 0x05, 0xda, 0xc7, 0x84, 0xe5, 0xbf, 0x9e, 0xab, 0xa2, 0x92, 0x0a,
	0x58, 0x4e, 0x3b, 0x66, 0x30, 0x8b, 0x0c, 0x6b, 0xb5, 0x77, 0x57, 0x70, 0xcb, 0x1b, 0xa8, 0x0f,
	0xad, 0x11, 0xff, 0xd4, 0x4e, 0x47, 0xa6, 0x98, 0x09, 0x9f, 0xf8, 0xa0, 0xac, 0x61, 0xb1, 0xe0,
	0x45, 0x9c, 0xac, 0xf5, 0xbf, 0x83, 0x57, 0x9f, 0x37, 0xfb, 0xd7, 0x38, 0xd0, 0x00, 0xc5, 0x0e,
	0xce, 0xe9, 0xe5, 0x6d, 0x07, 0x7a, 0xb2, 0xb6, 0x19, 0xac, 0xa6, 0xb9, 0xa8, 0x8a, 0xdf, 0xff,
	0x0f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x5f, 0xb2, 0xa4, 0x0b, 0x0c, 0x00, 0x00,
}
