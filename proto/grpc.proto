syntax = "proto3";

package P4wnP1_grpc;

service P4WNP1 {
	rpc GetDeployedGadgetSetting (Empty) returns (GadgetSettings) {}
	rpc DeployGadgetSetting (Empty) returns (GadgetSettings) {}
	rpc GetGadgetSettings (Empty) returns (GadgetSettings) {}
	rpc SetGadgetSettings (GadgetSettings) returns (GadgetSettings) {}
	rpc GetLEDSettings (Empty) returns (LEDSettings) {}
	rpc SetLEDSettings (LEDSettings) returns (Empty) {}
	rpc StopGadget (Empty) returns (Empty) {}
	rpc StartGadget (Empty) returns (Empty) {}
}

message LEDSettings {
	uint32 blink_count = 1;
}

message GadgetSettingsEthernet {
	string host_addr = 1;
	string dev_addr = 2;
}

message GadgetSettings {
	bool enabled = 1;
	string vid = 2;
	string pid = 3;
	string manufacturer = 4;
	string product = 5;
	string serial = 6;
	bool use_CDC_ECM = 7;
	bool use_RNDIS = 8;
	bool use_HID_KEYBOARD = 9;
	bool use_HID_MOUSE = 10;
	bool use_HID_RAW = 11;
	bool use_UMS = 12;
	bool use_SERIAL = 13;
	GadgetSettingsEthernet rndis_settings = 14;
	GadgetSettingsEthernet cdc_ecm_settings = 15;

}

message WiFiSettings {
	bool diasabled = 1;
	string reg = 2;				//Regulatory domain per ISO/IEC 3166-1 alpha2
	enum Mode {
		AP = 0;					//acts as access point
		STA = 1;				//acts as station for an existing access point
		STA_FAILOVER_AP = 2;	//acts as station, if connection to the given AP isn't possible spawns an own AP
	}
	Mode mode = 3;
	string ap_ssid = 4;			//SSID of AP to spawn
	enum APAuthMode {
		WPA2_PSK = 0;			//AP uses WPA2 pre-shared key
		OPEN = 1;				//Open System Authentication (no authentication)
	}
	APAuthMode auth_mode = 5;
	uint32 ap_channel = 6;
	string ap_psk = 7;			//pre-shared key if auth_mode == WPA2_PSK
	bool ap_hide_ssid = 8;		//if true, SSID gets hidden for spawned AP

	string client_ssid = 9;
	string client_psk = 10;

	bool disable_nexmon = 11;	//if true, legacy driver / firmware is used instead of nexmon
}


message Empty {}
