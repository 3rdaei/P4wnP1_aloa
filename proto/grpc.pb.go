// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package P4wnP1_grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	LEDSettings
	GadgetSettings
	GadgetSettingsEthernet
	GadgetSettingsUMS
	WiFiSettings
	Empty
*/
package P4wnP1_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WiFiSettings_Mode int32

const (
	WiFiSettings_AP              WiFiSettings_Mode = 0
	WiFiSettings_STA             WiFiSettings_Mode = 1
	WiFiSettings_STA_FAILOVER_AP WiFiSettings_Mode = 2
)

var WiFiSettings_Mode_name = map[int32]string{
	0: "AP",
	1: "STA",
	2: "STA_FAILOVER_AP",
}
var WiFiSettings_Mode_value = map[string]int32{
	"AP":              0,
	"STA":             1,
	"STA_FAILOVER_AP": 2,
}

func (x WiFiSettings_Mode) String() string {
	return proto.EnumName(WiFiSettings_Mode_name, int32(x))
}
func (WiFiSettings_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type WiFiSettings_APAuthMode int32

const (
	WiFiSettings_WPA2_PSK WiFiSettings_APAuthMode = 0
	WiFiSettings_OPEN     WiFiSettings_APAuthMode = 1
)

var WiFiSettings_APAuthMode_name = map[int32]string{
	0: "WPA2_PSK",
	1: "OPEN",
}
var WiFiSettings_APAuthMode_value = map[string]int32{
	"WPA2_PSK": 0,
	"OPEN":     1,
}

func (x WiFiSettings_APAuthMode) String() string {
	return proto.EnumName(WiFiSettings_APAuthMode_name, int32(x))
}
func (WiFiSettings_APAuthMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

type LEDSettings struct {
	BlinkCount uint32 `protobuf:"varint,1,opt,name=blink_count,json=blinkCount" json:"blink_count,omitempty"`
}

func (m *LEDSettings) Reset()                    { *m = LEDSettings{} }
func (m *LEDSettings) String() string            { return proto.CompactTextString(m) }
func (*LEDSettings) ProtoMessage()               {}
func (*LEDSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LEDSettings) GetBlinkCount() uint32 {
	if m != nil {
		return m.BlinkCount
	}
	return 0
}

type GadgetSettings struct {
	Enabled          bool                    `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	Vid              string                  `protobuf:"bytes,2,opt,name=vid" json:"vid,omitempty"`
	Pid              string                  `protobuf:"bytes,3,opt,name=pid" json:"pid,omitempty"`
	Manufacturer     string                  `protobuf:"bytes,4,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Product          string                  `protobuf:"bytes,5,opt,name=product" json:"product,omitempty"`
	Serial           string                  `protobuf:"bytes,6,opt,name=serial" json:"serial,omitempty"`
	Use_CDC_ECM      bool                    `protobuf:"varint,7,opt,name=use_CDC_ECM,json=useCDCECM" json:"use_CDC_ECM,omitempty"`
	Use_RNDIS        bool                    `protobuf:"varint,8,opt,name=use_RNDIS,json=useRNDIS" json:"use_RNDIS,omitempty"`
	Use_HID_KEYBOARD bool                    `protobuf:"varint,9,opt,name=use_HID_KEYBOARD,json=useHIDKEYBOARD" json:"use_HID_KEYBOARD,omitempty"`
	Use_HID_MOUSE    bool                    `protobuf:"varint,10,opt,name=use_HID_MOUSE,json=useHIDMOUSE" json:"use_HID_MOUSE,omitempty"`
	Use_HID_RAW      bool                    `protobuf:"varint,11,opt,name=use_HID_RAW,json=useHIDRAW" json:"use_HID_RAW,omitempty"`
	Use_UMS          bool                    `protobuf:"varint,12,opt,name=use_UMS,json=useUMS" json:"use_UMS,omitempty"`
	Use_SERIAL       bool                    `protobuf:"varint,13,opt,name=use_SERIAL,json=useSERIAL" json:"use_SERIAL,omitempty"`
	RndisSettings    *GadgetSettingsEthernet `protobuf:"bytes,14,opt,name=rndis_settings,json=rndisSettings" json:"rndis_settings,omitempty"`
	CdcEcmSettings   *GadgetSettingsEthernet `protobuf:"bytes,15,opt,name=cdc_ecm_settings,json=cdcEcmSettings" json:"cdc_ecm_settings,omitempty"`
	UmsSettings      *GadgetSettingsUMS      `protobuf:"bytes,16,opt,name=ums_settings,json=umsSettings" json:"ums_settings,omitempty"`
}

func (m *GadgetSettings) Reset()                    { *m = GadgetSettings{} }
func (m *GadgetSettings) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettings) ProtoMessage()               {}
func (*GadgetSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GadgetSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GadgetSettings) GetVid() string {
	if m != nil {
		return m.Vid
	}
	return ""
}

func (m *GadgetSettings) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *GadgetSettings) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *GadgetSettings) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *GadgetSettings) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *GadgetSettings) GetUse_CDC_ECM() bool {
	if m != nil {
		return m.Use_CDC_ECM
	}
	return false
}

func (m *GadgetSettings) GetUse_RNDIS() bool {
	if m != nil {
		return m.Use_RNDIS
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_KEYBOARD() bool {
	if m != nil {
		return m.Use_HID_KEYBOARD
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_MOUSE() bool {
	if m != nil {
		return m.Use_HID_MOUSE
	}
	return false
}

func (m *GadgetSettings) GetUse_HID_RAW() bool {
	if m != nil {
		return m.Use_HID_RAW
	}
	return false
}

func (m *GadgetSettings) GetUse_UMS() bool {
	if m != nil {
		return m.Use_UMS
	}
	return false
}

func (m *GadgetSettings) GetUse_SERIAL() bool {
	if m != nil {
		return m.Use_SERIAL
	}
	return false
}

func (m *GadgetSettings) GetRndisSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.RndisSettings
	}
	return nil
}

func (m *GadgetSettings) GetCdcEcmSettings() *GadgetSettingsEthernet {
	if m != nil {
		return m.CdcEcmSettings
	}
	return nil
}

func (m *GadgetSettings) GetUmsSettings() *GadgetSettingsUMS {
	if m != nil {
		return m.UmsSettings
	}
	return nil
}

type GadgetSettingsEthernet struct {
	HostAddr string `protobuf:"bytes,1,opt,name=host_addr,json=hostAddr" json:"host_addr,omitempty"`
	DevAddr  string `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr" json:"dev_addr,omitempty"`
}

func (m *GadgetSettingsEthernet) Reset()                    { *m = GadgetSettingsEthernet{} }
func (m *GadgetSettingsEthernet) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsEthernet) ProtoMessage()               {}
func (*GadgetSettingsEthernet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GadgetSettingsEthernet) GetHostAddr() string {
	if m != nil {
		return m.HostAddr
	}
	return ""
}

func (m *GadgetSettingsEthernet) GetDevAddr() string {
	if m != nil {
		return m.DevAddr
	}
	return ""
}

type GadgetSettingsUMS struct {
	Cdrom bool   `protobuf:"varint,1,opt,name=cdrom" json:"cdrom,omitempty"`
	File  string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *GadgetSettingsUMS) Reset()                    { *m = GadgetSettingsUMS{} }
func (m *GadgetSettingsUMS) String() string            { return proto.CompactTextString(m) }
func (*GadgetSettingsUMS) ProtoMessage()               {}
func (*GadgetSettingsUMS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GadgetSettingsUMS) GetCdrom() bool {
	if m != nil {
		return m.Cdrom
	}
	return false
}

func (m *GadgetSettingsUMS) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type WiFiSettings struct {
	Diasabled     bool                    `protobuf:"varint,1,opt,name=diasabled" json:"diasabled,omitempty"`
	Reg           string                  `protobuf:"bytes,2,opt,name=reg" json:"reg,omitempty"`
	Mode          WiFiSettings_Mode       `protobuf:"varint,3,opt,name=mode,enum=P4wnP1_grpc.WiFiSettings_Mode" json:"mode,omitempty"`
	ApSsid        string                  `protobuf:"bytes,4,opt,name=ap_ssid,json=apSsid" json:"ap_ssid,omitempty"`
	AuthMode      WiFiSettings_APAuthMode `protobuf:"varint,5,opt,name=auth_mode,json=authMode,enum=P4wnP1_grpc.WiFiSettings_APAuthMode" json:"auth_mode,omitempty"`
	ApChannel     uint32                  `protobuf:"varint,6,opt,name=ap_channel,json=apChannel" json:"ap_channel,omitempty"`
	ApPsk         string                  `protobuf:"bytes,7,opt,name=ap_psk,json=apPsk" json:"ap_psk,omitempty"`
	ApHideSsid    bool                    `protobuf:"varint,8,opt,name=ap_hide_ssid,json=apHideSsid" json:"ap_hide_ssid,omitempty"`
	ClientSsid    string                  `protobuf:"bytes,9,opt,name=client_ssid,json=clientSsid" json:"client_ssid,omitempty"`
	ClientPsk     string                  `protobuf:"bytes,10,opt,name=client_psk,json=clientPsk" json:"client_psk,omitempty"`
	DisableNexmon bool                    `protobuf:"varint,11,opt,name=disable_nexmon,json=disableNexmon" json:"disable_nexmon,omitempty"`
}

func (m *WiFiSettings) Reset()                    { *m = WiFiSettings{} }
func (m *WiFiSettings) String() string            { return proto.CompactTextString(m) }
func (*WiFiSettings) ProtoMessage()               {}
func (*WiFiSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WiFiSettings) GetDiasabled() bool {
	if m != nil {
		return m.Diasabled
	}
	return false
}

func (m *WiFiSettings) GetReg() string {
	if m != nil {
		return m.Reg
	}
	return ""
}

func (m *WiFiSettings) GetMode() WiFiSettings_Mode {
	if m != nil {
		return m.Mode
	}
	return WiFiSettings_AP
}

func (m *WiFiSettings) GetApSsid() string {
	if m != nil {
		return m.ApSsid
	}
	return ""
}

func (m *WiFiSettings) GetAuthMode() WiFiSettings_APAuthMode {
	if m != nil {
		return m.AuthMode
	}
	return WiFiSettings_WPA2_PSK
}

func (m *WiFiSettings) GetApChannel() uint32 {
	if m != nil {
		return m.ApChannel
	}
	return 0
}

func (m *WiFiSettings) GetApPsk() string {
	if m != nil {
		return m.ApPsk
	}
	return ""
}

func (m *WiFiSettings) GetApHideSsid() bool {
	if m != nil {
		return m.ApHideSsid
	}
	return false
}

func (m *WiFiSettings) GetClientSsid() string {
	if m != nil {
		return m.ClientSsid
	}
	return ""
}

func (m *WiFiSettings) GetClientPsk() string {
	if m != nil {
		return m.ClientPsk
	}
	return ""
}

func (m *WiFiSettings) GetDisableNexmon() bool {
	if m != nil {
		return m.DisableNexmon
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*LEDSettings)(nil), "P4wnP1_grpc.LEDSettings")
	proto.RegisterType((*GadgetSettings)(nil), "P4wnP1_grpc.GadgetSettings")
	proto.RegisterType((*GadgetSettingsEthernet)(nil), "P4wnP1_grpc.GadgetSettingsEthernet")
	proto.RegisterType((*GadgetSettingsUMS)(nil), "P4wnP1_grpc.GadgetSettingsUMS")
	proto.RegisterType((*WiFiSettings)(nil), "P4wnP1_grpc.WiFiSettings")
	proto.RegisterType((*Empty)(nil), "P4wnP1_grpc.Empty")
	proto.RegisterEnum("P4wnP1_grpc.WiFiSettings_Mode", WiFiSettings_Mode_name, WiFiSettings_Mode_value)
	proto.RegisterEnum("P4wnP1_grpc.WiFiSettings_APAuthMode", WiFiSettings_APAuthMode_name, WiFiSettings_APAuthMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P4WNP1 service

type P4WNP1Client interface {
	GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	DeployGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	GetGadgetSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error)
	SetGadgetSettings(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error)
	GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error)
	SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error)
	MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error)
}

type p4WNP1Client struct {
	cc *grpc.ClientConn
}

func NewP4WNP1Client(cc *grpc.ClientConn) P4WNP1Client {
	return &p4WNP1Client{cc}
}

func (c *p4WNP1Client) GetDeployedGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetDeployedGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) DeployGadgetSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/DeployGadgetSetting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) GetGadgetSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetGadgetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) SetGadgetSettings(ctx context.Context, in *GadgetSettings, opts ...grpc.CallOption) (*GadgetSettings, error) {
	out := new(GadgetSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/SetGadgetSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) GetLEDSettings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LEDSettings, error) {
	out := new(LEDSettings)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/GetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) SetLEDSettings(ctx context.Context, in *LEDSettings, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/SetLEDSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4WNP1Client) MountUMSFile(ctx context.Context, in *GadgetSettingsUMS, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/P4wnP1_grpc.P4WNP1/MountUMSFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for P4WNP1 service

type P4WNP1Server interface {
	GetDeployedGadgetSetting(context.Context, *Empty) (*GadgetSettings, error)
	DeployGadgetSetting(context.Context, *Empty) (*GadgetSettings, error)
	GetGadgetSettings(context.Context, *Empty) (*GadgetSettings, error)
	SetGadgetSettings(context.Context, *GadgetSettings) (*GadgetSettings, error)
	GetLEDSettings(context.Context, *Empty) (*LEDSettings, error)
	SetLEDSettings(context.Context, *LEDSettings) (*Empty, error)
	MountUMSFile(context.Context, *GadgetSettingsUMS) (*Empty, error)
}

func RegisterP4WNP1Server(s *grpc.Server, srv P4WNP1Server) {
	s.RegisterService(&_P4WNP1_serviceDesc, srv)
}

func _P4WNP1_GetDeployedGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetDeployedGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetDeployedGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetDeployedGadgetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_DeployGadgetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).DeployGadgetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/DeployGadgetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).DeployGadgetSetting(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_GetGadgetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetGadgetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetGadgetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetGadgetSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_SetGadgetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).SetGadgetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/SetGadgetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).SetGadgetSettings(ctx, req.(*GadgetSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_GetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).GetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/GetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).GetLEDSettings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_SetLEDSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LEDSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).SetLEDSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/SetLEDSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).SetLEDSettings(ctx, req.(*LEDSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4WNP1_MountUMSFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GadgetSettingsUMS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4WNP1Server).MountUMSFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/P4wnP1_grpc.P4WNP1/MountUMSFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4WNP1Server).MountUMSFile(ctx, req.(*GadgetSettingsUMS))
	}
	return interceptor(ctx, in, info, handler)
}

var _P4WNP1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "P4wnP1_grpc.P4WNP1",
	HandlerType: (*P4WNP1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployedGadgetSetting",
			Handler:    _P4WNP1_GetDeployedGadgetSetting_Handler,
		},
		{
			MethodName: "DeployGadgetSetting",
			Handler:    _P4WNP1_DeployGadgetSetting_Handler,
		},
		{
			MethodName: "GetGadgetSettings",
			Handler:    _P4WNP1_GetGadgetSettings_Handler,
		},
		{
			MethodName: "SetGadgetSettings",
			Handler:    _P4WNP1_SetGadgetSettings_Handler,
		},
		{
			MethodName: "GetLEDSettings",
			Handler:    _P4WNP1_GetLEDSettings_Handler,
		},
		{
			MethodName: "SetLEDSettings",
			Handler:    _P4WNP1_SetLEDSettings_Handler,
		},
		{
			MethodName: "MountUMSFile",
			Handler:    _P4WNP1_MountUMSFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x8d, 0x13, 0x7f, 0xe9, 0xca, 0x76, 0x15, 0x76, 0xeb, 0xb4, 0x76, 0x6d, 0x03, 0xad, 0x03,
	0xf2, 0x30, 0x18, 0x68, 0xd6, 0xd7, 0x01, 0xd3, 0x2c, 0x25, 0xf6, 0x1a, 0xc5, 0x82, 0x54, 0xcf,
	0xd8, 0x13, 0xc1, 0x88, 0xac, 0x4d, 0xc4, 0xfa, 0x80, 0x44, 0x65, 0xeb, 0xfb, 0xfe, 0xe8, 0x1e,
	0xf6, 0x3f, 0x06, 0x52, 0xb2, 0x63, 0xb7, 0x6e, 0x32, 0x6c, 0x6f, 0xba, 0xe7, 0x9c, 0x7b, 0x78,
	0x45, 0x1e, 0x4a, 0x00, 0x8b, 0x3c, 0x8b, 0x86, 0x59, 0x9e, 0x8a, 0x14, 0xe9, 0xfe, 0x9b, 0xdf,
	0x13, 0xff, 0x35, 0x96, 0x90, 0x35, 0x04, 0xfd, 0xd2, 0x75, 0x42, 0x26, 0x04, 0x4f, 0x16, 0x05,
	0x7a, 0x09, 0xfa, 0xf5, 0x8a, 0x27, 0x37, 0x38, 0x4a, 0xcb, 0x44, 0x98, 0x8d, 0x93, 0xc6, 0x69,
	0x3f, 0x00, 0x05, 0x8d, 0x24, 0x62, 0xfd, 0xdd, 0x84, 0xc1, 0x05, 0xa1, 0x0b, 0x26, 0x36, 0x3d,
	0x26, 0x74, 0x58, 0x42, 0xae, 0x57, 0x8c, 0x2a, 0x7d, 0x37, 0x58, 0x97, 0xc8, 0x80, 0xa3, 0x5b,
	0x4e, 0xcd, 0xc3, 0x93, 0xc6, 0xa9, 0x16, 0xc8, 0x47, 0x89, 0x64, 0x9c, 0x9a, 0x47, 0x15, 0x92,
	0x71, 0x8a, 0x2c, 0xe8, 0xc5, 0x24, 0x29, 0xdf, 0x93, 0x48, 0x94, 0x39, 0xcb, 0xcd, 0xa6, 0xa2,
	0x76, 0x30, 0xb9, 0x42, 0x96, 0xa7, 0xb4, 0x8c, 0x84, 0xd9, 0x52, 0xf4, 0xba, 0x44, 0x4f, 0xa0,
	0x5d, 0xb0, 0x9c, 0x93, 0x95, 0xd9, 0x56, 0x44, 0x5d, 0xa1, 0x17, 0xa0, 0x97, 0x05, 0xc3, 0x23,
	0x67, 0x84, 0xdd, 0x91, 0x67, 0x76, 0xd4, 0x5c, 0x5a, 0x59, 0xb0, 0x91, 0x33, 0x72, 0x47, 0x1e,
	0x7a, 0x06, 0xb2, 0xc0, 0xc1, 0x95, 0x33, 0x09, 0xcd, 0xae, 0x62, 0xbb, 0x65, 0xc1, 0x54, 0x8d,
	0x4e, 0xc1, 0x90, 0xe4, 0x78, 0xe2, 0xe0, 0xb7, 0xee, 0x6f, 0x3f, 0x4f, 0xed, 0xc0, 0x31, 0x35,
	0xa5, 0x19, 0x94, 0x05, 0x1b, 0x4f, 0x9c, 0x35, 0x8a, 0x2c, 0xe8, 0xaf, 0x95, 0xde, 0x74, 0x16,
	0xba, 0x26, 0x28, 0x99, 0x5e, 0xc9, 0x14, 0xb4, 0x1e, 0x45, 0x6a, 0x02, 0x7b, 0x6e, 0xea, 0x9b,
	0x51, 0xc6, 0x13, 0x27, 0xb0, 0xe7, 0xe8, 0x2b, 0xe8, 0x48, 0x7e, 0xe6, 0x85, 0x66, 0x4f, 0x71,
	0xed, 0xb2, 0x60, 0x33, 0x2f, 0x44, 0xcf, 0x01, 0x24, 0x11, 0xba, 0xc1, 0xc4, 0xbe, 0x34, 0xfb,
	0x9b, 0xbe, 0x0a, 0x40, 0xbf, 0xc0, 0x20, 0x4f, 0x28, 0x2f, 0x70, 0x51, 0x1f, 0x84, 0x39, 0x38,
	0x69, 0x9c, 0xea, 0x67, 0xdf, 0x0e, 0xb7, 0xce, 0x77, 0xb8, 0x7b, 0x56, 0xae, 0x58, 0xb2, 0x3c,
	0x61, 0x22, 0xe8, 0xab, 0xd6, 0xcd, 0x11, 0x7a, 0x60, 0x44, 0x34, 0xc2, 0x2c, 0x8a, 0xef, 0xdc,
	0x1e, 0xfd, 0x7b, 0xb7, 0x41, 0x44, 0x23, 0x37, 0x8a, 0x37, 0x76, 0x36, 0xf4, 0xca, 0x78, 0x6b,
	0x30, 0x43, 0x59, 0xbd, 0xb8, 0xc7, 0x6a, 0xe6, 0x85, 0x81, 0x5e, 0xc6, 0x9b, 0x89, 0x2c, 0x1f,
	0x9e, 0xec, 0x5f, 0x4c, 0x1e, 0xdd, 0x32, 0x2d, 0x04, 0x26, 0x94, 0xe6, 0x2a, 0x70, 0x5a, 0xd0,
	0x95, 0x80, 0x4d, 0x69, 0x8e, 0xbe, 0x86, 0x2e, 0x65, 0xb7, 0x15, 0x57, 0xc5, 0xae, 0x43, 0xd9,
	0xad, 0xa4, 0xac, 0x1f, 0xe1, 0xf8, 0x93, 0x35, 0xd1, 0x17, 0xd0, 0x8a, 0x68, 0x9e, 0xc6, 0x75,
	0x72, 0xab, 0x02, 0x21, 0x68, 0xbe, 0xe7, 0x2b, 0x56, 0x3b, 0xa8, 0x67, 0xeb, 0xaf, 0x23, 0xe8,
	0xcd, 0xf9, 0x39, 0xdf, 0xbc, 0xe4, 0x37, 0xa0, 0x51, 0x4e, 0x8a, 0xed, 0xe0, 0xdf, 0x01, 0x32,
	0xe8, 0x39, 0x5b, 0xac, 0xa3, 0x9f, 0xb3, 0x05, 0x3a, 0x83, 0x66, 0x9c, 0x52, 0xa6, 0xb2, 0x3f,
	0xf8, 0x68, 0x33, 0xb6, 0x8d, 0x87, 0x5e, 0x4a, 0x59, 0xa0, 0xb4, 0x32, 0x1b, 0x24, 0xc3, 0x45,
	0xc1, 0x69, 0x7d, 0x2f, 0xda, 0x24, 0x0b, 0x0b, 0x4e, 0x91, 0x0d, 0x1a, 0x29, 0xc5, 0x12, 0x2b,
	0xc7, 0x96, 0x72, 0x7c, 0xf5, 0x79, 0x47, 0xdb, 0xb7, 0x4b, 0xb1, 0x54, 0xbe, 0x5d, 0x52, 0x3f,
	0xc9, 0x78, 0x91, 0x0c, 0x47, 0x4b, 0x92, 0x24, 0xac, 0xba, 0x3e, 0xfd, 0x40, 0x23, 0xd9, 0xa8,
	0x02, 0xd0, 0x97, 0xd0, 0x26, 0x19, 0xce, 0x8a, 0x1b, 0x75, 0x79, 0xb4, 0xa0, 0x45, 0x32, 0xbf,
	0xb8, 0x41, 0x27, 0xd0, 0x23, 0x19, 0x5e, 0x72, 0xca, 0xaa, 0xb1, 0xaa, 0xbb, 0x03, 0x24, 0x1b,
	0x73, 0xca, 0xd4, 0x68, 0x2f, 0x41, 0x8f, 0x56, 0x9c, 0x25, 0xa2, 0x12, 0x68, 0xaa, 0x1b, 0x2a,
	0x48, 0x09, 0x9e, 0x43, 0x5d, 0x29, 0x77, 0x50, 0xbc, 0x56, 0x21, 0x72, 0x85, 0xef, 0x60, 0x40,
	0xb9, 0xda, 0x45, 0x9c, 0xb0, 0x3f, 0xe2, 0x34, 0xa9, 0xaf, 0x4c, 0xbf, 0x46, 0xaf, 0x14, 0x68,
	0x7d, 0x0f, 0x4d, 0xf5, 0x1a, 0x6d, 0x38, 0xb4, 0x7d, 0xe3, 0x00, 0x75, 0xe0, 0x28, 0x7c, 0x67,
	0x1b, 0x0d, 0xf4, 0x18, 0x1e, 0x85, 0xef, 0x6c, 0x7c, 0x6e, 0x4f, 0x2e, 0xa7, 0xbf, 0xba, 0x01,
	0xb6, 0x7d, 0xe3, 0xd0, 0x7a, 0x05, 0x70, 0xb7, 0x09, 0xa8, 0x07, 0xdd, 0xb9, 0x6f, 0x9f, 0x61,
	0x3f, 0x7c, 0x6b, 0x1c, 0xa0, 0x2e, 0x34, 0xa7, 0xbe, 0x7b, 0x65, 0x34, 0xac, 0x0e, 0xb4, 0xdc,
	0x38, 0x13, 0x1f, 0xce, 0xfe, 0x6c, 0x42, 0xdb, 0x7f, 0x33, 0xbf, 0xf2, 0x5f, 0x23, 0x0f, 0xcc,
	0x0b, 0x26, 0x1c, 0x96, 0xad, 0xd2, 0x0f, 0x8c, 0xee, 0x24, 0x08, 0xa1, 0x9d, 0x2d, 0x57, 0xad,
	0x4f, 0x9f, 0xdd, 0x93, 0x72, 0xeb, 0x00, 0x8d, 0xe1, 0x71, 0xe5, 0xf5, 0xbf, 0x9d, 0xce, 0xe1,
	0xf8, 0x82, 0x89, 0x8f, 0xbe, 0xc5, 0xff, 0xc1, 0x67, 0x0a, 0xc7, 0xe1, 0x27, 0x3e, 0xf7, 0xf5,
	0x3c, 0x64, 0xf8, 0x13, 0x0c, 0x2e, 0x98, 0xd8, 0xfe, 0xab, 0xec, 0x9b, 0xca, 0xdc, 0xc1, 0xb6,
	0xd4, 0x95, 0x43, 0xb8, 0xeb, 0xf0, 0x59, 0xf5, 0xd3, 0x3d, 0xde, 0xd6, 0x01, 0x72, 0xa0, 0xe7,
	0xc9, 0xff, 0xd5, 0xcc, 0x0b, 0xcf, 0xf9, 0x8a, 0xa1, 0x07, 0xbe, 0x3d, 0xfb, 0x5d, 0xae, 0xdb,
	0xea, 0x87, 0xf9, 0xc3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x56, 0x2c, 0x60, 0xd5, 0x3e, 0x07,
	0x00, 0x00,
}
