syntax = "proto3";

package P4wnP1_grpc;

service P4WNP1 {
	rpc GetDeployedGadgetSetting (Empty) returns (GadgetSettings) {}
	rpc DeployGadgetSetting (Empty) returns (GadgetSettings) {}
	rpc GetGadgetSettings (Empty) returns (GadgetSettings) {}
	rpc SetGadgetSettings (GadgetSettings) returns (GadgetSettings) {}
	rpc GetLEDSettings (Empty) returns (LEDSettings) {}
	rpc SetLEDSettings (LEDSettings) returns (Empty) {}
	rpc MountUMSFile (GadgetSettingsUMS) returns (Empty) {}
}

/* LED */
message LEDSettings {
	uint32 blink_count = 1;
}
/* End LED */

/* USB Gadget */
message GadgetSettings {
	bool enabled = 1;
	string vid = 2;
	string pid = 3;
	string manufacturer = 4;
	string product = 5;
	string serial = 6;
	bool use_CDC_ECM = 7;
	bool use_RNDIS = 8;
	bool use_HID_KEYBOARD = 9;
	bool use_HID_MOUSE = 10;
	bool use_HID_RAW = 11;
	bool use_UMS = 12;
	bool use_SERIAL = 13;
	GadgetSettingsEthernet rndis_settings = 14; //Only applicable if RNDIS on
	GadgetSettingsEthernet cdc_ecm_settings = 15; //Only applicable if CDC ECM on
	GadgetSettingsUMS ums_settings = 16;
	EthernetInterfaceSettings ethernet_settings = 17; //only applicable if RNDIS or CDC ECM on
}

message GadgetSettingsEthernet {
	string host_addr = 1;
	string dev_addr = 2;
}

message GadgetSettingsUMS {
	bool cdrom = 1;
	string file = 2;
}
/* End USB Gadget */

message EthernetInterfaceSettings {
	string name = 1;
	enum Mode {
		MANUAL = 0;
		DHCP_CLIENT = 1;
		DHCP_SERVER = 2;
	}
	Mode mode = 2;
	string ipAddress4 = 3;
	string netmask4 = 4;
	bool enabled = 5;
	DHCPServerSettings dhcpServerSettings = 6;
}

/* DHCP */
message DHCPServerSettings {
	uint32 listenPort = 1;		//if a port other thaan 0 is provided, a DNS server is bound to this port in addition to DHCP
	string listenInterface = 2;
	string leaseFile = 3;
	bool notAuthoritative = 4;
	bool doNotBindInterface = 5; //if true, DHCP server binds to 0.0.0.0, no matter which interface is given (no restart needed on interface up/down)
	string callbackScript = 6; //Script executes when lease is added/deleted `scriptname <add|del> <MAC> <IP> <HOSTNAME>`

	repeated DHCPServerRange ranges = 7;
    //repeated DHCPServerOption options = 8;
    map<uint32, string> options = 8; //Replaced by map (dealing with key duplicates is ONLY PARTIALY handled by proto3), See RFC 2132 for details of available options
	repeated DHCPServerStaticHost staticHosts = 9;
}

//Could be used for IPv4 or IPv6 (refer dnsmasq docs), nor field for prefix length (default is 64)
message DHCPServerRange {
	string rangeLower = 1; //Lowest IP of DHCP range
	string rangeUpper = 2; //Highest IP of DHCP range
	string leaseTime = 3;
}


//Used for static leases
message DHCPServerStaticHost {
	string mac = 1;
	string ip = 2;
}

/* End DHCP */

/* WiFi */
message WiFiSettings {
	bool diasabled = 1;
	string reg = 2;				//Regulatory domain per ISO/IEC 3166-1 alpha2
	enum Mode {
		AP = 0;					//acts as access point
		STA = 1;				//acts as station for an existing access point
		STA_FAILOVER_AP = 2;	//acts as station, if connection to the given AP isn't possible spawns an own AP
	}
	Mode mode = 3;
	string ap_ssid = 4;			//SSID of AP to spawn
	enum APAuthMode {
		WPA2_PSK = 0;			//AP uses WPA2 pre-shared key
		OPEN = 1;				//Open System Authentication (no authentication)
	}
	APAuthMode auth_mode = 5;
	uint32 ap_channel = 6;
	string ap_psk = 7;			//pre-shared key if auth_mode == WPA2_PSK
	bool ap_hide_ssid = 8;		//if true, SSID gets hidden for spawned AP

	string client_ssid = 9;
	string client_psk = 10;

	bool disable_nexmon = 11;	//if true, legacy driver / firmware is used instead of nexmon
}
/* End WiFI */

message Empty {}
